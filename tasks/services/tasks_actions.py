from datetime import datetime

from bs4 import BeautifulSoup
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.db.transaction import atomic
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, redirect
from django.shortcuts import render
from django.urls import reverse
from django.utils.dateformat import format

from tasks.forms import AddTaskForm, EditTaskForm
from tasks.models import Task, AttachedFile, Engineer, Tag, Comment
from tasks.services.export import TasksExcelExport
from tasks.services.service import remove_unused_attached_files
from tasks.services.tasks_prepare import get_tasks


def auto_resize_pic(html_string):

    if html_string:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏
        soup = BeautifulSoup(html_string, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ <img>
        img_tag = soup.find('img')
        if img_tag:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç style
            if 'style' in img_tag.attrs:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —á–∞—Å—Ç–∏
                styles = img_tag['style'].split(';')
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–ª—å
                new_styles = []
                for style in styles:
                    if style.strip().startswith('width'):
                        # –ó–∞–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –Ω–∞ 100%
                        new_styles.append('width:100%')
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º height (—É–¥–∞–ª—è–µ–º –µ–≥–æ)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç style
                img_tag['style'] = '; '.join(new_styles).strip('; ')

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            return str(soup)
        else:
            return html_string
    else:
        return ""


@atomic
def create_tags(request, tags_list):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–µ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–≥–∞—Ö –∏–∑ —Ñ–æ—Ä–º—ã (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, —Ç–∞–∫ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID)
    tags_data = request.getlist(tags_list)  # –ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ
    new_tag_ids = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–≥–æ–≤ (–∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, —Ç–∞–∫ –∏ –Ω–æ–≤—ã—Ö)
    print(tags_data)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    existing_tags = {tag.tag_name for tag in Tag.objects.all()}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

    existing_lower_tags = {tag.lower() for tag in existing_tags}
    for tag in tags_data:
        tag_lower = tag.lower()
        # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if tag_lower not in existing_lower_tags:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_tag = Tag.objects.create(tag_name=tag)
            # –î–æ–±–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞ –≤ —Å–ø–∏—Å–æ–∫
            new_tag_ids.append(str(new_tag.id))
        else:
            try:
                # –ï—Å–ª–∏ —Ç–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ —Å–ø–∏—Å–æ–∫
                existing_tag = Tag.objects.get(tag_name=tag)
                new_tag_ids.append(str(existing_tag.id))
                print(existing_tag.id)
            except Exception as e:
                print(f"–¢–µ–≥ {tag} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ POST-–∑–∞–ø—Ä–æ—Å–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏—Ö ID
    post_data = request.copy()
    post_data.setlist(tags_list, new_tag_ids)  # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ –∏—Ö ID
    return post_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ POST-–∑–∞–ø—Ä–æ—Å–∞


def add_event_log(user, task, text):
    try:
        name = f"{user.engineer.first_name} {user.engineer.second_name}"
    except AttributeError:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç engineer, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = user.username

    pattern = f"{text} [{name} / {datetime.now().strftime('%d.%m.%Y %H:%M')}]\n"
    task.completion_text += pattern
    task.save()


@login_required
@atomic
def create_task(request):
    redirect_to = reverse("tasks")

    if request.method == "POST":

        created_text = auto_resize_pic(request.POST.get("text"))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        post_data = request.POST.copy()  # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        post_data["text"] = created_text  # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–ø–∏–∏
        print(created_text)
        post_data = create_tags(post_data, "tags_create")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        print(post_data)
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤—Å–µ—Ö —Ç–µ–≥–æ–≤)
        form = AddTaskForm(post_data, request.FILES, instance=Task(creator=request.user))

        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        redirect_to = request.POST.get("from_url", redirect_to).strip()


        if form.is_valid():
            task = form.save()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            for file in request.FILES.getlist("files[]"):
                task.files.add(AttachedFile.objects.create(file=file))

            messages.add_message(
                request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{form.cleaned_data['header']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
            )
            add_event_log(user=request.user, task=task, text="‚ûï –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return redirect(redirect_to)
        else:
            messages.add_message(request, messages.WARNING, form.errors)

    return redirect(redirect_to)


@login_required
@atomic
def edit_task(request, task_id):
    task = get_object_or_404(Task, pk=task_id)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    redirect_to = reverse("tasks")

    if request.method == "POST":
        edited_text = auto_resize_pic(request.POST.get("text_edit"))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        post_data = request.POST.copy()  # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        post_data["text_edit"] = edited_text  # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–ø–∏–∏

        post_data = create_tags(post_data, "tags_edit")  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏

        form = EditTaskForm(post_data, request.FILES, instance=task)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        redirect_to = request.POST.get("from_url", redirect_to).strip()

        if form.is_valid():
            updated_task = form.save()

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            remove_unused_attached_files(request.POST.get("fileuploader-list-files"), updated_task)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file in request.FILES.getlist("files[]"):
                updated_task.files.add(AttachedFile.objects.create(file=file))
            updated_task.save()

            add_event_log(user=request.user, task=updated_task, text="‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞")

            messages.add_message(
                request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{form.cleaned_data['header']}' –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞"
            )
        else:
            messages.add_message(request, messages.WARNING, form.errors)

    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    return redirect(redirect_to)


@login_required
@atomic
def take_task(request, task_id):
    task = get_object_or_404(Task, pk=task_id)
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    redirect_to = reverse("tasks")

    if request.method == "POST":
        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        redirect_to = request.POST.get("from_url", redirect_to).strip()

        try:
            Engineer.objects.get(user=request.user)
            print(request.user.engineer)
            task.engineers.add(request.user.engineer)
            task.save()
            add_event_log(user=request.user, task=task, text="üôã‚Äç‚ôÇÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª –∑–∞–¥–∞—á—É")
            messages.add_message(request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{task.header}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        except Engineer.DoesNotExist:
            print(f"—É {request.user} –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞")
            messages.add_message(request, messages.WARNING, f"—É {request.user} –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞")
            return redirect(redirect_to)

    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return redirect(redirect_to)


@login_required
def delete_task(request, task_id):
    redirect_to: str = reverse("tasks")

    if request.method == "POST":

        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        redirect_to = request.POST.get("from_url", redirect_to).strip()

        task = get_object_or_404(Task, pk=task_id)

        if request.user.is_staff or request.user == task.creator:

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task.deleted = True

            task.save()

            add_event_log(user=request.user, task=task, text="üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")

            messages.add_message(request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{task.header}' —É–¥–∞–ª–µ–Ω–∞")
        else:
            messages.add_message(request, messages.ERROR, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")

    return HttpResponseRedirect(redirect_to)


@login_required
def reopen_task(request, task_id):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤ –ø–æ–ª–µ task.is_done = False –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ª—é task.completion_text
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∫—É–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
    """
    redirect_to: str = reverse("tasks")

    if request.method == "POST":
        task = get_object_or_404(Task, pk=task_id)

        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        redirect_to = request.POST.get("from_url", redirect_to).strip()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task.is_done = False

        task.save()
        add_event_log(user=request.user, task=task, text="‚Ü©Ô∏è –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞")
        messages.add_message(request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{task.header}' –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É")

    return HttpResponseRedirect(redirect_to)


@login_required
def comment_task(request, task_id):
    redirect_to: str = reverse("tasks")

    if request.method == "POST":

        task = get_object_or_404(Task, pk=task_id)
        is_done = "is_done" in request.POST
        answer = request.POST.get("answer", "").strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        redirect_to = request.POST.get("from_url", redirect_to).strip()


        if answer:
            print(answer)
            text = auto_resize_pic(answer)
            print(text)
            comment = Comment.objects.create(
                task=task,
                author=request.user,
                text=text,
            )
            comment.save()

        if is_done:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task.is_done = True
            task.save()

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏
            add_event_log(user=request.user, task=task, text="‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            messages.add_message(request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{task.header}' –∑–∞–∫—Ä—ã—Ç–∞")
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            add_event_log(user=request.user, task=task, text="‚§¥Ô∏è –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É")
            messages.add_message(request, messages.SUCCESS, f"–î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞—á–µ '{task.header}'")

    return HttpResponseRedirect(redirect_to)


# @login_required
# def close_task(request, task_id):
#
#     redirect_to: str = reverse("tasks")
#
#     if request.method == "POST":
#         task = get_object_or_404(Task, pk=task_id)
#         comment = request.POST.get("comment", "")
#
#         # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
#         redirect_to = request.POST.get("from_url", redirect_to).strip()
#
#         # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
#         task.is_done = True
#         # task.completion_time = datetime.now()
#         task.save()
#         add_event_log(user=request.user, task=task, text="‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞")
#         messages.add_message(request, messages.SUCCESS, f"–ó–∞–¥–∞—á–∞ '{task.header}' –∑–∞–∫—Ä—ã—Ç–∞")
#
#     return HttpResponseRedirect(redirect_to)


@login_required
def export_to_excel(request):
    tasks = get_tasks(request, "filter_params", page_number=1, per_page=100)

    export = TasksExcelExport("Tasks")

    paginator = tasks["pagination_data"]["paginator"]

    for page_num in range(paginator.num_pages):
        page_data = paginator.get_page(page_num)
        print(page_data.object_list)
        export.add_tasks(page_data.object_list)

    return export.make_response(filename=f"tasks_for_{request.user}_{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


@login_required
def print_tasks(request):
    filter_params = request.GET.urlencode()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    # –£–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ per_page, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
    tasks = get_tasks(request, filter_params, page_number=1, per_page=100000)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    all_tasks = tasks["pagination_data"]["paginator"].object_list

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    sorted_tasks = sorted(all_tasks, key=lambda task: (task.completion_time or task.create_time, task.create_time))

    tasks_data = []
    for task in sorted_tasks:
        engineers = [str(engineer.second_name) for engineer in task.engineers.all()]
        departments = [str(department) for department in task.departments.all()]
        responsible_list = departments + engineers
        responsible = ", ".join(responsible_list) if responsible_list else ""

        formatted_date = format(task.completion_time, "d.m.Y") if task.completion_time else "‚Äî"

        task_info = {
            "date": formatted_date,
            "header": task.header,
            "engineers": responsible,
            "is_done": task.is_done,
            "priority": task.priority,
        }
        tasks_data.append(task_info)

    return render(request, "components/task/print.html", {"tasks": tasks_data})
